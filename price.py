import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from hyperliquid import HyperliquidSync

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC —Å Hyperliquid
def get_btc_price():
    try:
        client = HyperliquidSync({})
        data = client.info.getAllMids()
        for item in data:
            if item['feed'] == 'BTC-SPOT':
                return float(item['mid'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC: {e}")
    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price
async def price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price = get_btc_price()
    if price:
        await update.message.reply_text(f"üü¢ –¶–µ–Ω–∞ BTC –Ω–∞ Hyperliquid: ${price:.2f}")
    else:
        await update.message.reply_text("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–ê–ú–ï–ù–ò –≠–¢–û –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!
    bot_token = "YOUR_TELEGRAM_BOT_TOKEN"

    app = ApplicationBuilder().token(bot_token).build()
    app.add_handler(CommandHandler("price", price_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /price...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
